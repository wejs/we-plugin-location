
var helper = {};

helper.actionUtil = require('./actionUtil.js');

helper.extendSails = function(sails) {
  // sails.js config getter
  sails.getConfig =  function(s) {
    var o = sails.config;

    s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
    s = s.replace(/^\./, '');           // strip a leading dot
    var a = s.split('.');
    while (a.length) {
        var n = a.shift();
        if (n in o) {
            o = o[n];
        } else {
            return;
        }
    }
    return o;
  }

  if (!sails.tags) sails.tags = {};

  sails.tags.arrayToSelect = function(elementAttribs,data, selectedData, idAttr, textAttr) {
    if (!idAttr) idAttr = 'id';
    if (!textAttr) textAttr = 'text';

    var selectTag = '<select ' + elementAttribs + '>';

    for (var i = data.length - 1; i >= 0; i--) {
      selectTag += '<option value="' + data[i][idAttr] + '"">';
      selectTag += data[i][textAttr];
      selectTag += '</option>';
    }

    selectTag += '</select>';

    return selectTag;
  }

  sails.tags.arrayToSelect2 = function(elementId, elementAttribs,data, selectedData, idAttr, textAttr) {
    if (!elementId) {
      sails.log.error('elementId is required for sails.tags.arrayToSelect2', elementId);
      return '';
    }

    if (!idAttr) idAttr = 'id';
    if (!textAttr) textAttr = 'text';

    var selectTag = '<select id="' + elementId + '" ' + elementAttribs + '>';

    for (var i = data.length - 1; i >= 0; i--) {
      selectTag += '<option value="' + data[i][idAttr] + '"">';
      selectTag += data[i][textAttr];
      selectTag += '</option>';
    }

    selectTag += '</select>';

    selectTag += '<script>jQuery("#' + elementId + '").select2({tokenSeparators: [",", " "]});</script>';

    return selectTag;
  }

}


helper.db = {};

/**
 * Helper to load records form DB if not loaded in recordsRelated store
 *
 * @param  {object}   req            express.js request
 * @param  {object}   recordsRelated object with related records in format recordsRelated[modelName][id] = record
 * @param  {string}   model          model name
 * @param  {string|integer}          modelId
 * @param  {Function} cb             callback to run after end
 */
helper.db.loadRecordIfNotLoaded = function(recordsRelated, model, modelId , cb) {

  if ( !recordsRelated[model] ) {
    recordsRelated[model] = {};
  }

  var list = recordsRelated[model];

  // skip if already loaded
  if( list && list[modelId] ) {
    return cb(null, list[modelId]);
  }

  var query = {};

  if (model === 'user') {
    query.idInProvider = modelId;
  } else {
    query.id = modelId;
  }

  // if not loaded then load it from db
  sails.models[model]
  .findOne(query)
  .exec(function (err, recordRelated) {
    if(err) return cb(err);
    // check if the array contains this record
    if ( !list[modelId] && recordRelated ) {
      list[modelId] = recordRelated;
    }

    return cb(null, recordRelated);
  });

}


module.exports = helper;
